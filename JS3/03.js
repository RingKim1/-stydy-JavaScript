// 실행 컨텍스트(스코프, 변수, 객체, 호이스팅)

// 실행할 코드에 제공할 환경 정보들을 모아놓은 객체
// 1. 선언된 변수를 위로 끌어올림 = hoisting
// 2. 외부 환경정보를 구성
// 3. this 값을 설정

// 이해 하기 위해 콜 스택 이해 필요
// stack : 버스킷 last in, first out
// queue : 원통 first in, first out

// `실행 컨텍스트`란 <u>실행 할 코드에 제공할 환경 정보</u>들을 모아놓은 `객체`
// 즉, 동일 환경에 있는 코드를 실행할 때 필요한 환경 정보들을 모아 컨텍스트를 구성하고 이것을 '콜스택' 에 쌓아올림
// 코드의 환경 및 순서를 보장

// 실행 컨텍스트 객체의 실체(=담기는 정보)
// 1. VariableEnvironment
// - record(식별자 정보), outer
// 2. LexicalEnvironment
// VE = LE, 스냅샷 유지 여부가 다름
// 3. ThisBindings

// 호이스팅(Hoist)
// 식별자 정보를 끌어올림(record를 수집)
// 규칙

// 함수 선언문, 함수 표현식은 호이스팅이 다름
// 함수 표현식을  활용하는 습관

// outer - 스코프, 스코프 체인

// 스코프 체인
// outer는 선언될 당시 외부 환경정보를 가지고 있다.


// 각각의 실행 컨텍스트는 LE안에 record와 outer를 가지고 있고,
// outer 안에는 그 실행 컨텍스트가 선언될 당시의 LE정보가 다 들어있으니
// scope chain에 의해 상위 컨텍스트으 record를 읽어 올 수 있다.